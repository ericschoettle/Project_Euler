/*
Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:

Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Square	 	P4,n=n2	 	1, 4, 9, 16, 25, ...
Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
*/
function generateNumberSet(base, numDigits) {
  let n = 1
  let current = 1
  let set = [];
  const lowerLim=Math.pow(10, numDigits-1);
  const upperLim=Math.pow(10, numDigits);
  while (current < upperLim) {
    current = n*((base-2)*n-(base-4))/2
    if (current > lowerLim && current < upperLim) {
      set.push(current);
    }
    n += 1
  }
  return set
}

// Structure I want: {3: {42}}
function generateNumberSets() {
  let superSet = {}
	for (let i = 3; i <= 8; i++) {
    let consolidated = {}
    const set = generateNumberSet(i, 4);
    set.forEach(number => {
      
      // Extract the digits
      const digits = number.toString().split('');
      const firstTwo = digits.slice(0,2).sort().join();
      const lastTwo = digits.slice(2).sort().join();

      // use digits as indicies in array of numbers
      if (!consolidated[firstTwo]) {
        consolidated[firstTwo] = {};
      }
      if (!consolidated[firstTwo][lastTwo]) {
        consolidated[firstTwo][lastTwo] = number
      }
    })
    superSet[i] = consolidated;
  }
  return superSet;
}

const superSet = generateNumberSets();

function searchForCyclicNumbers(existing, usedBases, remainingBases) {
  function searchSuperSetByObj(currObj) {
    if (currObj) {
      for (const lastTwo in currObj) {
        existing.push( {[lastTwo]: currObj[lastTwo]} );
        usedBases.push(base);
        remainingBases.splice(i,1);
        searchForCyclicNumbers(existing, usedBases, remainingBases);
      }
    }
  }
  if (usedBases.length === 0) {  // Inititate
    const base = remainingBases[0];
    for (const firstTwo in superSet[base]) {
      const currObj = superSet[base][firstTwo];
      searchSuperSetByObj(currObj);
    }
  } else {
    const prevObj = existing[existing.length-1];
    const firstTwo = Object.keys(prevObj)[0];
    if (remainingBases.length) {
      for (let i = 0; i < remainingBases.length; i++) {
        const base = remainingBases[i];
        const currObj = superSet[base][firstTwo];
        searchSuperSetByObj(currObj);
      }
    } else {
      // todo - 1. Pull the digit splitting into a function, so I can use it to, 2. Check if the last number has the same last digits as the first. 
      // Then, 3. Figure out how to pass it back. 
      // 4. Maybe my for loops are going to have pointer issues with existing? Spread operator hack?

      return existing
    }
  }
}

console.log(searchForCyclicNumbers([], [], [3,4,5,6,7,8]))
